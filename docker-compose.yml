services:
  php:
    image: php:8.2-fpm
    build:
      context: .
      dockerfile: PHPDockerfile
    container_name: php_app
    volumes:
      - ./:/var/www/html
    networks:
      - python_network
    

  web:
    image: nginx:latest
    container_name: nginx_server
    ports:
      - "8090:80"
    volumes:
      - ./:/var/www/html
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - python_network

# banco de dados mySQL
  db:
    image: mysql:5.7.22 # imagem do docker hub escolhida
    platform: linux/x86_64 # SO escolhido para o banco
    restart: unless-stopped # serviço sempre reiniciado
    container_name: python-db # nome do serviço
  
    environment:
      MYSQL_DATABASE: ${DB_DATABASE:-python}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-root}
      MYSQL_PASSWORD: ${DB_PASSWORD:-python}
      MYSQL_USER: ${DB_USERNAME:-python}
      
    volumes: # pastas espelhadas no container
      - ./.dados/mysql/dbdata:/var/lib/mysql

    ports: # portas de acesso
      - "3309:3306"
    networks:
      - python_network

  # serviços são os container no Docker que são como VM's 
  # o Docker não tem uma "tela" para uso
  # noVNC - para dar acesso à tela do container Ubuntu 
  python:
      # a construção (copiar) será na raiz da pasta
      build: .
      # porta da VM : Porta no container
      ports:
      - "7092:7092"
      # persistência/cópia de dados
      volumes:
      - ./src:/src
      environment:
      # tela virtual que será usada pelo noVNC
      - DISPLAY=:0
      # terminal dentro do container python
      tty: true 

networks:
    python_network: # nome da rede
        driver: bridge # permite a comunicação em rede entre os containers

#https://app-t98-final-sandy.vercel.app/

# ver os containers   
# docker ps
# 127.0.0.1:9000

# cria as imagens dos containers 
# docker compose build

# removendo os containers (descarta tudo )
# docker compose down

# colocar os containers atualizados em funcionamento
# docker compose up -d --build

